#!/usr/bin/perl -w
#
# (c)ookie (m)uncher
#
# by: Nick Jennings
#

use strict;

&main();

# load configuration options
sub get_config {
	return (
		log_file => 'access.log',
		chart_char => '*',
		hist_file => 'cm.hist', 
		show_data => 'date hour',
	);	
}

# main body of script
sub main {
	my %conf = &get_config();
	my %cookies;   # keys are different cookies
	my @log = &get_log_contents($conf{'log_file'});

	# go through each entry in log and do stuff
	foreach my $entry (@log) {
		next if ($entry =~ /^$/);   # skip blank lines

		my @log_entry = &split_log_entry($entry);   # split log entry into each chunk 
		my ($date, $time) = split(/:/, $log_entry[3], 2);
		my $cookie = $log_entry[$#log_entry];   # cookie is last chunk in log entry

		next unless ($cookie =~ /^\d+\.\d+\.\d+\./); 
		#$cookie =~ s/^\d+\.\d+\.\d+\.//g;
		$time =~ s/:\d{2}:\d{2} -\d{4}$//g;
		$cookies{$date}{$time}{$cookie}{num}++;   # count cookie instances
	}


	my @dates = &sort_dates('/', keys %cookies);
	foreach my $date (@dates) {
		unless ($conf{show_data} =~ /hour/) {
			print "$date : "; 
		}
		#my @times = &sort_times(':', keys %{ $cookies{$date} } );
		my @times = sort (keys %{ $cookies{$date} } );
		foreach my $time (@times) {
			if ($conf{show_data} =~ /hour/) {
				print "$date $time : ";
			}
			my @cookie_keys = keys %{ $cookies{$date}{$time} };
			foreach my $cookie (@cookie_keys) {
				next unless ($cookies{$date}{$time}{$cookie}{num});
				# scalar contains num of occurences for this date, already on file
				#my $previous_cookie_visits = &load_history_file($date, $cookie);
				# adds that num to the current instances read
				#$cookies{$date}{$cookie}{num} += $previous_cookie_visits;

				print $conf{chart_char};
			}
			if ($conf{show_data} =~ /hour/) {
				print "\n";
			}
		}
		print "\n";
	}
}


# split log entry up and return an array of each chunk of data in line
sub split_log_entry {
	my $line = shift;
	chomp $line;
	my $c = 0;	# counter
	my $dlm = '';	# delimeter
	my $dlm_line = '';	# '|' delimited line

	my @work = split(//, $line);

	# character by character parser to split log data into proper chunks
	foreach my $char (@work) {
		unless ($dlm) {
			$char =~ s/ /|/g;
			if ($char =~ /\[/) {
				$char =~ s/\[/|/;	
				$dlm = ']';
			}
			elsif ($char =~ /"/) {
				$char =~ s/"/|/;
				$dlm = '"';
			}
		}
		else {
			if ($char =~ /$dlm/) {
				$char =~ s/$dlm/|/g;
				$dlm = '';
			}	
		}

		$dlm_line .= $char;
	}

	$dlm_line =~ s/\|+/|/g;
	$dlm_line =~ s/\|$//g;
	$dlm_line =~ s/^\|//g;
	return ( split(/\|/, $dlm_line) );	
}

# open specified log file and return array of the logs data in lines.
sub get_log_contents {
	my $log_file = shift;
	open (LOG, $log_file) or die "Couldn't open $log_file : $!\n";
	my @tmp = <LOG>;
	close LOG;
	return(@tmp);
}

# first arg is delimeter for the second wich is an array of dates in 
# an expected format (DD$dlmMM$dlmYYYY) and return the group sorted from oldest to most recent.
sub sort_dates {
	my $dlm = shift;
	my @dates = ();
	foreach my $date (@_) {
	 	$date = &convert_date($dlm, $date);   # converts date to for numeric test
		push @dates, $date;
	}
	my @sorted_dates = ();
	foreach my $date (sort @dates) {
		# converts date back from numeric test
	 	$date = &convert_date_back($dlm, $date);   
		push @sorted_dates, $date;
	}
	
	return(@sorted_dates);
}

# first arg is delimeter for the second wich is an array of times in 
# an expected numbers and return the group sorted from oldest to most recent.
sub sort_times {
	my $dlm = shift;
	my @times = ();
	foreach my $time (@_) {
	 	$time = &convert_time($dlm, $time);   # converts time for numeric test
		push @times, $time;
	}
	my @sorted_times = ();
	foreach my $time (sort @times) {
		# converts time back from numeric test
	 	$time = &convert_time_back($dlm, $time);   
		push @sorted_times, $time;
	}
	
	return(@sorted_times);
}

# converts date: DD/MM/YYYY to YYYYMMDD
sub convert_date {
	my ($dlm, $date) = @_;
	my ($day, $month, $year) = split("$dlm", $date);
	unless ($month =~ /^\d{2}$/) {
		$month = &convert_month($month);	
	}
	return("$year$month$day");
}


# converts date: YYYYMMDD to DD/MM/YYYY
sub convert_date_back {
	my ($dlm, $date) = @_;
	my ($year, $month, $day) = unpack("a4" . "a2" . "a2", $date);
	if ($month =~ /^\d{2}$/) {
		$month = &convert_month_back($month);
	}
	return("$day$dlm$month$dlm$year");
}


# converts the standard 3 letter abreviation for the month into its 
# numerical equivelant
sub convert_month {
        my $month = shift;
        if      ($month =~ /^Jan$/)     { $month = '01'; }      
        elsif   ($month =~ /^Feb$/)     { $month = '02'; }      
        elsif   ($month =~ /^Mar$/)     { $month = '03'; }      
        elsif   ($month =~ /^Apr$/)     { $month = '04'; }      
        elsif   ($month =~ /^May$/)     { $month = '05'; }      
        elsif   ($month =~ /^Jun$/)     { $month = '06'; }      
        elsif   ($month =~ /^Jul$/)     { $month = '07'; }      
        elsif   ($month =~ /^Aug$/)     { $month = '08'; }      
        elsif   ($month =~ /^Sep$/)     { $month = '09'; }      
        elsif   ($month =~ /^Oct$/)     { $month = '10'; }      
        elsif   ($month =~ /^Nov$/)     { $month = '11'; }      
        elsif   ($month =~ /^Dec$/)     { $month = '12'; }      
        return ($month);
}


# converts the numerical 2 digit value to the standard 3 letter
# equivelant 
sub convert_month_back {
        my $month = shift;
        if      ($month =~ /^01$/)     { $month = 'Jan'; }      
        elsif   ($month =~ /^02$/)     { $month = 'Feb'; }      
        elsif   ($month =~ /^03$/)     { $month = 'Mar'; }      
        elsif   ($month =~ /^04$/)     { $month = 'Apr'; }      
        elsif   ($month =~ /^05$/)     { $month = 'May'; }      
        elsif   ($month =~ /^06$/)     { $month = 'Jun'; }      
        elsif   ($month =~ /^07$/)     { $month = 'Jul'; }      
        elsif   ($month =~ /^08$/)     { $month = 'Aug'; }      
        elsif   ($month =~ /^09$/)     { $month = 'Sep'; }      
        elsif   ($month =~ /^10$/)     { $month = 'Oct'; }      
        elsif   ($month =~ /^11$/)     { $month = 'Nov'; }      
        elsif   ($month =~ /^12$/)     { $month = 'Dec'; }      
        return ($month);
}
